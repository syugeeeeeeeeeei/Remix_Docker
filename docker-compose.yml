# docker-compose.yml
services:
  remix:
    build:
      context: ./compose/remix
      dockerfile: Dockerfile
    container_name: remix
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      api:
        condition: service_healthy
      orm: # ormコンテナが型生成を完了するまで待機
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - API_BASE_URL=http://api:3000
    volumes:
      - prisma_types_volume:/app/prisma-types:ro # readonlyで型情報をマウント

  api:
    build:
      context: ./compose/api
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      orm: # ormコンテナが型生成を完了するまで待機
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - prisma_types_volume:/app/prisma-types:ro # readonlyで型情報をマウント
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"] # APIが3000ポートで稼働していることを想定
      interval: 10s
      timeout: 5s
      retries: 5

  orm:
    build:
      context: ./compose/orm
      dockerfile: Dockerfile
    container_name: orm
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
    # Prismaのマイグレーションと型生成を実行
    command: >
      sh -c "npx prisma migrate deploy && npx prisma generate --output /app/prisma-types"
    volumes:
      - prisma_types_volume:/app/prisma-types # ormコンテナはこのボリュームに書き込む

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  prisma_types_volume: # Prismaの生成された型を共有するための名前付きボリューム